case_details:
-   case_detail: 'E   ImportError: cannot import name ''Ingress'' from ''new_case.ingress''
        (/Users/hchan/git/api-auto/new_case/ingress/__init__.py),失败请单独执行case:new_case/ingress/test_ingress_test1_post_L1.py::collect'
    case_flag: Error
    case_location: new_case/ingress/test_ingress_test1_post_L1.py::collect
    case_name: collect
    case_time: '0.00'
    extra: '

        ImportError while importing test module ''/Users/hchan/git/api-auto/new_case/ingress/test_ingress_test1_post_L1.py''.Hint:
        make sure your test modules/packages have valid Python names.Traceback:new_case/ingress/test_ingress_test1_post_L1.py:4:
        in <module>    from new_case.ingress import IngressE   ImportError: cannot
        import name ''Ingress'' from ''new_case.ingress'' (/Users/hchan/git/api-auto/new_case/ingress/__init__.py)'
-   case_detail: 'E   ImportError: cannot import name ''l0_data_list'' from ''new_case.service''
        (/Users/hchan/git/api-auto/new_case/service/__init__.py),失败请单独执行case:new_case/service/test_service.py::collect'
    case_flag: Error
    case_location: new_case/service/test_service.py::collect
    case_name: collect
    case_time: '0.00'
    extra: '

        ImportError while importing test module ''/Users/hchan/git/api-auto/new_case/service/test_service.py''.Hint:
        make sure your test modules/packages have valid Python names.Traceback:new_case/service/test_service.py:4:
        in <module>    from new_case.service import l0_data_listE   ImportError: cannot
        import name ''l0_data_list'' from ''new_case.service'' (/Users/hchan/git/api-auto/new_case/service/__init__.py)'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典增加::setup'
    case_flag: Error
    case_location: new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典增加::setup
    case_name: 测试key_value模式配置字典增加
    case_time: '0.00'
    extra: '

        [gw1] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/secret/test_secret.py::Testsecret::测试TLS保密字典创建::setup'
    case_flag: Error
    case_location: new_case/secret/test_secret.py::Testsecret::测试TLS保密字典创建::setup
    case_name: 测试TLS保密字典创建
    case_time: '0.00'
    extra: '

        [gw4] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名增加无集群无项目::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名增加无集群无项目::setup
    case_name: 测试域名之泛域名增加无集群无项目
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试创建项目_全部参数::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试创建项目_全部参数::setup
    case_name: 测试创建项目_全部参数
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/ingress/test_ingress.py::TestIngress::测试_标准API_创建访问规则[http类型一组规则和一个域名]::setup'
    case_flag: Error
    case_location: new_case/ingress/test_ingress.py::TestIngress::测试_标准API_创建访问规则[http类型一组规则和一个域名]::setup
    case_name: 测试_标准API_创建访问规则[http类型一组规则和一个域名]
    case_time: '0.00'
    extra: '

        [gw2] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试获取集群可用资源::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试获取集群可用资源::setup
    case_name: 测试获取集群可用资源
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/configmap/test_configmap.py::TestCMSuite::测试配置字典列表_无limit参数::setup'
    case_flag: Error
    case_location: new_case/configmap/test_configmap.py::TestCMSuite::测试配置字典列表_无limit参数::setup
    case_name: 测试配置字典列表_无limit参数
    case_time: '0.00'
    extra: '

        [gw1] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/secret/test_secret.py::Testsecret::测试获取保密字典列表::setup'
    case_flag: Error
    case_location: new_case/secret/test_secret.py::Testsecret::测试获取保密字典列表::setup
    case_name: 测试获取保密字典列表
    case_time: '0.00'
    extra: '

        [gw4] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/ingress/test_ingress.py::TestIngress::测试_标准API_访问规则详情[http类型一组规则和一个域名]::setup'
    case_flag: Error
    case_location: new_case/ingress/test_ingress.py::TestIngress::测试_标准API_访问规则详情[http类型一组规则和一个域名]::setup
    case_name: 测试_标准API_访问规则详情[http类型一组规则和一个域名]
    case_time: '0.00'
    extra: '

        [gw2] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名增加有集群无项目::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名增加有集群无项目::setup
    case_name: 测试域名之全域名增加有集群无项目
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试通过标准API获取项目列表_不带参数::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试通过标准API获取项目列表_不带参数::setup
    case_name: 测试通过标准API获取项目列表_不带参数
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典更新::setup'
    case_flag: Error
    case_location: new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典更新::setup
    case_name: 测试key_value模式配置字典更新
    case_time: '0.00'
    extra: '

        [gw1] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/secret/test_secret.py::Testsecret::测试更新TLS保密字典::setup'
    case_flag: Error
    case_location: new_case/secret/test_secret.py::Testsecret::测试更新TLS保密字典::setup
    case_name: 测试更新TLS保密字典
    case_time: '0.00'
    extra: '

        [gw4] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/ingress/test_ingress.py::TestIngress::测试_标准API_访问规则列表[http类型一组规则和一个域名]::setup'
    case_flag: Error
    case_location: new_case/ingress/test_ingress.py::TestIngress::测试_标准API_访问规则列表[http类型一组规则和一个域名]::setup
    case_name: 测试_标准API_访问规则列表[http类型一组规则和一个域名]
    case_time: '0.00'
    extra: '

        [gw2] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名列表::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名列表::setup
    case_name: 测试域名之泛域名列表
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试通过高级API获取项目列表::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试通过高级API获取项目列表::setup
    case_name: 测试通过高级API获取项目列表
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典详情::setup'
    case_flag: Error
    case_location: new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典详情::setup
    case_name: 测试key_value模式配置字典详情
    case_time: '0.00'
    extra: '

        [gw1] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/secret/test_secret.py::Testsecret::测试获取TLS保密字典详情::setup'
    case_flag: Error
    case_location: new_case/secret/test_secret.py::Testsecret::测试获取TLS保密字典详情::setup
    case_name: 测试获取TLS保密字典详情
    case_time: '0.00'
    extra: '

        [gw4] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/ingress/test_ingress.py::TestIngress::测试_标准API_搜索访问规则[http类型一组规则和一个域名]::setup'
    case_flag: Error
    case_location: new_case/ingress/test_ingress.py::TestIngress::测试_标准API_搜索访问规则[http类型一组规则和一个域名]::setup
    case_name: 测试_标准API_搜索访问规则[http类型一组规则和一个域名]
    case_time: '0.00'
    extra: '

        [gw2] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名更新添加集群::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名更新添加集群::setup
    case_name: 测试域名之泛域名更新添加集群
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试更新项目基本信息_全部参数_信息正确::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试更新项目基本信息_全部参数_信息正确::setup
    case_name: 测试更新项目基本信息_全部参数_信息正确
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典删除::setup'
    case_flag: Error
    case_location: new_case/configmap/test_configmap.py::TestCMSuite::测试key_value模式配置字典删除::setup
    case_name: 测试key_value模式配置字典删除
    case_time: '0.00'
    extra: '

        [gw1] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/ingress/test_ingress.py::TestIngress::测试_标准API_更新访问规则[http类型一组规则和一个域名]::setup'
    case_flag: Error
    case_location: new_case/ingress/test_ingress.py::TestIngress::测试_标准API_更新访问规则[http类型一组规则和一个域名]::setup
    case_name: 测试_标准API_更新访问规则[http类型一组规则和一个域名]
    case_time: '0.00'
    extra: '

        [gw2] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/secret/test_secret.py::Testsecret::测试删除TLS保密字典::setup'
    case_flag: Error
    case_location: new_case/secret/test_secret.py::Testsecret::测试删除TLS保密字典::setup
    case_name: 测试删除TLS保密字典
    case_time: '0.00'
    extra: '

        [gw4] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名更新去除集群::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名更新去除集群::setup
    case_name: 测试域名之全域名更新去除集群
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试获取项目详情::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试获取项目详情::setup
    case_name: 测试获取项目详情
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/ingress/test_ingress.py::TestIngress::测试_标准API_删除访问规则[http类型一组规则和一个域名]::setup'
    case_flag: Error
    case_location: new_case/ingress/test_ingress.py::TestIngress::测试_标准API_删除访问规则[http类型一组规则和一个域名]::setup
    case_name: 测试_标准API_删除访问规则[http类型一组规则和一个域名]
    case_time: '0.00'
    extra: '

        [gw2] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名详情::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名详情::setup
    case_name: 测试域名之泛域名详情
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试获取项目配额::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试获取项目配额::setup
    case_name: 测试获取项目配额
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名详情::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名详情::setup
    case_name: 测试域名之全域名详情
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试项目添加集群和更新项目配额::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试项目添加集群和更新项目配额::setup
    case_name: 测试项目添加集群和更新项目配额
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名删除::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之泛域名删除::setup
    case_name: 测试域名之泛域名删除
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试项目移除集群_多集群::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试项目移除集群_多集群::setup
    case_name: 测试项目移除集群_多集群
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名删除::setup'
    case_flag: Error
    case_location: new_case/domain/test_domain.py::TestDomainSuite::测试域名之全域名删除::setup
    case_name: 测试域名之全域名删除
    case_time: '0.00'
    extra: '

        [gw0] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试项目移除集群_单集群::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试项目移除集群_单集群::setup
    case_name: 测试项目移除集群_单集群
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试获取项目的命名空间::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试获取项目的命名空间::setup
    case_name: 测试获取项目的命名空间
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
-   case_detail: 'E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2'',失败请单独执行case:new_case/project/test_project.py::TestProjectSuite::测试删除项目::setup'
    case_flag: Error
    case_location: new_case/project/test_project.py::TestProjectSuite::测试删除项目::setup
    case_name: 测试删除项目
    case_time: '0.00'
    extra: '

        [gw3] darwin -- Python 3.7.6 /usr/local/opt/python/bin/python3.7    @pytest.fixture(scope="session",
        autouse=True)    def prepare_and_clear():        # 创建测试前准备的数据        project
        = Project()        data = {            "project_name": settings.PROJECT_NAME,            "regions":
        [settings.REGION_NAME],            "display_name": settings.PROJECT_NAME,            "description":
        "e2e test project",        }>       create_project_result = project.create_project("./test_data/project/create_project.jinja2",
        data)conftest.py:18: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ new_case/project/project.py:19: in create_project    data
        = self.generate_jinja_data(file, data)common/base_request.py:48: in generate_jinja_data    with
        codecs.open(filename, "r", encoding="utf-8") as fp:_ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ filename = ''./test_data/project/create_project.jinja2'',
        mode = ''rb'', encoding = ''utf-8'', errors = ''strict'', buffering = 1    def
        open(filename, mode=''r'', encoding=None, errors=''strict'', buffering=1):         """
        Open an encoded file using the given mode and return            a wrapped
        version providing transparent encoding/decoding.             Note: The wrapped
        version will only accept the object format            defined by the codecs,
        i.e. Unicode objects for most builtin            codecs. Output is also codec
        dependent and will usually be            Unicode as well.             Underlying
        encoded files are always opened in binary mode.            The default file
        mode is ''r'', meaning to open the file in read mode.             encoding
        specifies the encoding which is to be used for the            file.             errors
        may be given to define the error handling. It defaults            to ''strict''
        which causes ValueErrors to be raised in case an            encoding error
        occurs.             buffering has the same meaning as for the builtin open()
        API.            It defaults to line buffered.             The returned wrapped
        file object provides an extra attribute            .encoding which allows
        querying the used encoding. This            attribute is only available if
        an encoding was specified as            parameter.         """        if encoding
        is not None and \           ''b'' not in mode:            # Force opening
        of the file in binary mode            mode = mode + ''b''>       file = builtins.open(filename,
        mode, buffering)E       FileNotFoundError: [Errno 2] No such file or directory:
        ''./test_data/project/create_project.jinja2''/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py:904:
        FileNotFoundError'
failed_num: 39
pass_num: 0
rerun_num: 0
skip_num: 0
summary: '0 tests ran in 6.64 seconds. '
